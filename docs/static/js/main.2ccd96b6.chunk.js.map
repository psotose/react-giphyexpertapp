{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAE5B,EAAqCC,mBAAS,IAA9C,mBAAQC,EAAR,KAAoBC,EAApB,KAeA,OACE,sBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,MAKhB,SAEE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,QCNdG,EAAc,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAIvC,OACE,sBAAKC,UAAU,yCAAf,UACE,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,kCAAMA,EAAN,W,uBCROK,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEfN,EAFe,iDAEkCO,UAAUF,GAF5C,+DAGFG,MAAOR,GAHL,cAGfS,EAHe,gBAIEA,EAAKC,OAJP,uBAIbC,EAJa,EAIbA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVjB,kBAcdY,GAdc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAIxB,ECH0B,SAAEA,GAC5B,MAA0BrB,mBAAS,CACjC2B,KAAM,GACNO,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAW,WACTjB,EAASC,GACNiB,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZH,EAAS,CACPT,KAAMY,EACNL,SAAS,SAGd,CAACb,IASGc,EDrByBO,CAAcrB,GAAjCU,EAAb,EAAQJ,KAAaO,EAArB,EAAqBA,QASrB,OACE,qCACA,qBAAIjB,UAAU,yBAAd,cAAyCI,EAAzC,OAEEa,GAAW,mBAAGjB,UAAU,iCAAb,2BAEb,qBAAKA,UAAU,YAAf,SAEIc,EAAOF,KAAK,SAAAC,GAAG,OACb,aADoB,CACnB,EAAD,eAEMA,GADEA,EAAIhB,aExBT6B,EAAe,WAG1B,MAAoC3C,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAOA,OACE,gCACE,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGA,6BAEIS,EAAWqB,KAAK,SAAAR,GAAQ,OACtB,cAAC,EAAD,CAEEA,SAAWA,GADNA,Y,MCpBnBuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.2ccd96b6.chunk.js","sourcesContent":["import React, { useState }from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\n  const [ inputValue, setInputValue] = useState(''); // si lo dejo vacío el estado es undefined\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if ( inputValue.trim().length > 2 ) {\n      setCategories( categories => [ inputValue, ...categories ] );\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      {/* <h1> { inputValue } </h1> */}\n      <input \n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputChange }\n      />\n    </form>\n  )\n  \n}\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {  // se pone props en vez de img xq es lo que es en relidad ( props )\n                                          // pero si desestructuro es mas facil de leer\n  \n  // console.log({id, title, url});\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p> { title } </p>  \n      {/* { img.title } */}\n    </div>\n  )\n}\n","\nexport const getGifs = async(category) => { \n    \n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=xjY2A8bHNfzUzpJK2Pq2gY4seCOGG54X`\n  const resp = await fetch( url );\n  const { data } = await resp.json();\n\n  const gifs = data.map( img => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url\n    }\n  })\n  \n  return gifs;\n}","import React from 'react' //, { useState, useEffect } le saco esto xq voy a trabajar en el custom hook\nimport { GifGridItem } from './GifGridItem'\n// import { getGifs } from '../helpers/getGifs'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\nexport const GifGrid = ({ category }) => {\n  \n  // const [count, setCount] = useState(0);\n  // const state = useFetchGifs();\n  const { data:images, loading} = useFetchGifs( category );\n  // con data:images como quien dice renombro a data y luego puedo llamarlo como images\n  //const [images, setImages] = useState([]);\n\n  // useEffect( () => {\n  //   getGifs( category )\n  //     .then( imgs => setImages( imgs )); // esto es lo mismo que .then(setImages)\n  // }, [ category ]) // con el [] le estoy diciendo que solo quiero que se ejecute la instrucción cuando el componente es renderizado por 1ra vez\n\n  return (\n    <>\n    <h3 className=\"animate__bounceInRight\"> {category} </h3>\n    {/* { loading ? 'Cargando...' : 'Fin de carga' } */}\n    { loading && <p className=\"animate_animated animate_flash\">'Cargando...'</p> }  \n    {/* con el && solo evalua el 1ro si es true y con el false no hace nada */}\n    <div className=\"card-grid\">\n      {\n        images.map( img => (  //antes del custom hook era images.map, despues de la asignacion data:images puedo volver a usar images\n          <GifGridItem \n            key={ img.id }\n            {...img}\n            // img={ img } \n          />\n        ))\n      }\n\n        {/* <ol>\n          {\n            images.map( img => (\n              <li key={ img.id }> { img.title } </li>\n            ))\n          }\n          ####################################\n          aca tb puedo desestructurar y hacer \n            images.map( { id, title } => (\n              <li key={ \n                id }> { title } </li>\n            )) \n          ######################################  \n        </ol> \n           <h3> { count } </h3>\n        <button onClick={ ()=> setCount( count + 1 ) }></button>*/}\n      </div> \n    </>\n  )\n}\n","// con el hook a diferencia del functional component, no necesito\n// hacer el import de react a menos que retornemos JSX\n\nimport { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect( () => {\n    getGifs( category )\n      .then( imgs =>{\n        console.log(imgs)\n        setState({\n          data: imgs,\n          loading: false\n        });\n      })\n  }, [category])\n\n  // setTimeout(() =>{\n  //   setState({\n  //     data: [1,2,3,4,5],\n  //     loading: false\n  //   })\n  // }, 3000);\n\n  return state; // { data:[], loading: true };\n}","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n  const [categories, setCategories] = useState(['One Punch']);\n\n  // const handleAdd = () => {\n  //   // setCategories( [...categories, 'HunterXHunter'] );\n  //   setCategories( categories => [...categories, 'HunterXHunter' ] );\n  // };\n\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories= { setCategories }/>  \n      <hr />\n\n      {/* <button onClick={ handleAdd } >Agregar</button> */}\n      <ol>\n        {\n          categories.map( category =>\n            <GifGrid \n              key={category}\n              category={ category } \n            />\n            // {return <li key={ category }> { category } </li>} si le saco las llaves de afuera y el return, lo retorna =\n          )\n        }\n      </ol>\n    </div>\n  )\n}\n\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp'\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}